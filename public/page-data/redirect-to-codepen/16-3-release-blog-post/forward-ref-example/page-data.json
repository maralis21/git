{"componentChunkName":"component---src-templates-codepen-example-js","path":"/redirect-to-codepen/16-3-release-blog-post/forward-ref-example","result":{"pageContext":{"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"function withTheme(Component) {\\r\\n  // highlight-next-line\\r\\n  function ThemedComponent({forwardedRef, ...rest}) {\\r\\n    return (\\r\\n      <ThemeContext.Consumer>\\r\\n        {theme => (\\r\\n          // Assign the custom prop \\\"forwardedRef\\\" as a ref\\r\\n          // highlight-next-line\\r\\n          <Component\\r\\n            {...rest}\\r\\n            ref={forwardedRef}\\r\\n            theme={theme}\\r\\n          />\\r\\n        )}\\r\\n      </ThemeContext.Consumer>\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // Note the second param \\\"ref\\\" provided by React.forwardRef.\\r\\n  // We can pass it along to ThemedComponent as a regular prop, e.g. \\\"forwardedRef\\\"\\r\\n  // And it can then be attached to the Component.\\r\\n  // highlight-range{1-3}\\r\\n  return React.forwardRef((props, ref) => (\\r\\n    <ThemedComponent {...props} forwardedRef={ref} />\\r\\n  ));\\r\\n}\\r\\n\\r\\n// Here we assume that FancyButton has been imported into the current scope\\r\\nconst FancyThemedButton = withTheme(FancyButton);\\r\\n\\r\\n// Create a ref using the new Referenace API, as above\\r\\n// highlight-next-line\\r\\nconst fancyButtonRef = React.createRef();\\r\\n\\r\\n// fancyButtonRef will now point to FancyButton\\r\\n// highlight-range{4}\\r\\n<FancyThemedButton\\r\\n  label=\\\"Click me!\\\"\\r\\n  onClick={handleClick}\\r\\n  ref={fancyButtonRef}\\r\\n/>;\\r\\n\",\"js_external\":\"//unpkg.com/react/umd/react.development.js;//unpkg.com/react-dom/umd/react-dom.development.js\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}},"staticQueryHashes":[]}