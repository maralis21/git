{"componentChunkName":"component---src-templates-codepen-example-js","path":"/redirect-to-codepen/update-on-async-rendering/updating-external-data-when-props-change-after","result":{"pageContext":{"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"// After\\r\\nclass ExampleComponent extends React.Component {\\r\\n  state = {\\r\\n    externalData: null,\\r\\n  };\\r\\n\\r\\n  // highlight-range{1-13}\\r\\n  static getDerivedStateFromProps(props, state) {\\r\\n    // Store prevId in state so we can compare when props change.\\r\\n    // Clear out previously-loaded data (so we don't render stale stuff).\\r\\n    if (props.id !== state.prevId) {\\r\\n      return {\\r\\n        externalData: null,\\r\\n        prevId: props.id,\\r\\n      };\\r\\n    }\\r\\n\\r\\n    // No state update necessary\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    this._loadAsyncData(this.props.id);\\r\\n  }\\r\\n\\r\\n  // highlight-range{1-5}\\r\\n  componentDidUpdate(prevProps, prevState) {\\r\\n    if (this.state.externalData === null) {\\r\\n      this._loadAsyncData(this.props.id);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  componentWillUnmount() {\\r\\n    if (this._asyncRequest) {\\r\\n      this._asyncRequest.cancel();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    if (this.state.externalData === null) {\\r\\n      // Render loading state ...\\r\\n    } else {\\r\\n      // Render real UI ...\\r\\n    }\\r\\n  }\\r\\n\\r\\n  _loadAsyncData(id) {\\r\\n    this._asyncRequest = loadMyAsyncData(id).then(\\r\\n      externalData => {\\r\\n        this._asyncRequest = null;\\r\\n        this.setState({externalData});\\r\\n      }\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\",\"js_external\":\"//unpkg.com/react/umd/react.development.js;//unpkg.com/react-dom/umd/react-dom.development.js\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}},"staticQueryHashes":[]}