{"componentChunkName":"component---src-templates-codepen-example-js","path":"/redirect-to-codepen/16-4-release-blog-post/pointer-events-example","result":{"pageContext":{"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import React from 'react';\\r\\nimport ReactDOM from 'react-dom';\\r\\n\\r\\nconst CIRCLE_SIZE = 85;\\r\\n\\r\\nclass DragBox extends React.Component {\\r\\n  state = {\\r\\n    hasCapture: false,\\r\\n    circleLeft: 80,\\r\\n    circleTop: 80,\\r\\n  };\\r\\n  isDragging = false;\\r\\n  previousLeft = 0;\\r\\n  previousTop = 0;\\r\\n\\r\\n  onDown = event => {\\r\\n    this.isDragging = true;\\r\\n    event.target.setPointerCapture(event.pointerId);\\r\\n\\r\\n    // We store the initial coordinates to be able to calculate the changes\\r\\n    // later on.\\r\\n    this.extractPositionDelta(event);\\r\\n  };\\r\\n\\r\\n  onMove = event => {\\r\\n    if (!this.isDragging) {\\r\\n      return;\\r\\n    }\\r\\n    const {left, top} = this.extractPositionDelta(event);\\r\\n\\r\\n    this.setState(({circleLeft, circleTop}) => ({\\r\\n      circleLeft: circleLeft + left,\\r\\n      circleTop: circleTop + top,\\r\\n    }));\\r\\n  };\\r\\n\\r\\n  onUp = event => (this.isDragging = false);\\r\\n  onGotCapture = event => this.setState({hasCapture: true});\\r\\n  onLostCapture = event =>\\r\\n    this.setState({hasCapture: false});\\r\\n\\r\\n  extractPositionDelta = event => {\\r\\n    const left = event.pageX;\\r\\n    const top = event.pageY;\\r\\n    const delta = {\\r\\n      left: left - this.previousLeft,\\r\\n      top: top - this.previousTop,\\r\\n    };\\r\\n    this.previousLeft = left;\\r\\n    this.previousTop = top;\\r\\n    return delta;\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const {hasCapture, circleLeft, circleTop} = this.state;\\r\\n\\r\\n    const boxStyle = {\\r\\n      border: '1px solid #d9d9d9',\\r\\n      margin: '10px 0 20px',\\r\\n      minHeight: 400,\\r\\n      width: '100%',\\r\\n      position: 'relative',\\r\\n    };\\r\\n\\r\\n    const circleStyle = {\\r\\n      width: CIRCLE_SIZE,\\r\\n      height: CIRCLE_SIZE,\\r\\n      borderRadius: CIRCLE_SIZE / 2,\\r\\n      position: 'absolute',\\r\\n      left: circleLeft,\\r\\n      top: circleTop,\\r\\n      backgroundColor: hasCapture ? 'blue' : 'green',\\r\\n      touchAction: 'none',\\r\\n    };\\r\\n\\r\\n    return (\\r\\n      <div style={boxStyle}>\\r\\n        <div\\r\\n          style={circleStyle}\\r\\n          onPointerDown={this.onDown}\\r\\n          onPointerMove={this.onMove}\\r\\n          onPointerUp={this.onUp}\\r\\n          onPointerCancel={this.onUp}\\r\\n          onGotPointerCapture={this.onGotCapture}\\r\\n          onLostPointerCapture={this.onLostCapture}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nReactDOM.render(\\r\\n  <DragBox />,\\r\\n  document.getElementById('root')\\r\\n);\\r\\n\",\"js_external\":\"//unpkg.com/react/umd/react.development.js;//unpkg.com/react-dom/umd/react-dom.development.js\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}},"staticQueryHashes":[]}