{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"codeExamples":{"edges":[{"node":{"id":"an-application","code":"class TodoApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { items: [], text: '' };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>TODO</h3>\r\n        <TodoList items={this.state.items} />\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"new-todo\">\r\n            What needs to be done?\r\n          </label>\r\n          <input\r\n            id=\"new-todo\"\r\n            onChange={this.handleChange}\r\n            value={this.state.text}\r\n          />\r\n          <button>\r\n            Add #{this.state.items.length + 1}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ text: e.target.value });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (this.state.text.length === 0) {\r\n      return;\r\n    }\r\n    const newItem = {\r\n      text: this.state.text,\r\n      id: Date.now()\r\n    };\r\n    this.setState(state => ({\r\n      items: state.items.concat(newItem),\r\n      text: ''\r\n    }));\r\n  }\r\n}\r\n\r\nclass TodoList extends React.Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.items.map(item => (\r\n          <li key={item.id}>{item.text}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nroot.render(<TodoApp />);\r\n","mdAbsolutePath":"C:/Users/timot/OneDrive/Desktop/reactjs.org/content/home/examples/an-application.md"}},{"node":{"id":"a-simple-component","code":"import React from \"react\";\r\n\r\nexport default function HelloMessage(props) {\r\n  if (props.name) {\r\n    return <h1>Hello, {props.name}!</h1>;\r\n  } else {\r\n    return <span>Hey, stranger</span>;\r\n  }\r\n}\r\n\r\n","mdAbsolutePath":"C:/Users/timot/OneDrive/Desktop/reactjs.org/content/home/examples/a-simple-component.md"}},{"node":{"id":"a-component-using-external-plugins","code":"class MarkdownEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.md = new Remarkable();\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = { value: 'Hello, **world**!' };\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ value: e.target.value });\r\n  }\r\n\r\n  getRawMarkup() {\r\n    return { __html: this.md.render(this.state.value) };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"MarkdownEditor\">\r\n        <h3>Input</h3>\r\n        <label htmlFor=\"markdown-content\">\r\n          Enter some markdown\r\n        </label>\r\n        <textarea\r\n          id=\"markdown-content\"\r\n          onChange={this.handleChange}\r\n          defaultValue={this.state.value}\r\n        />\r\n        <h3>Output</h3>\r\n        <div\r\n          className=\"content\"\r\n          dangerouslySetInnerHTML={this.getRawMarkup()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nroot.render(<MarkdownEditor />);\r\n","mdAbsolutePath":"C:/Users/timot/OneDrive/Desktop/reactjs.org/content/home/examples/a-component-using-external-plugins.md"}},{"node":{"id":"a-stateful-component","code":"class Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { seconds: 0 };\r\n  }\r\n\r\n  tick() {\r\n    this.setState(state => ({\r\n      seconds: state.seconds + 1\r\n    }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Seconds: {this.state.seconds}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nroot.render(<Timer />);\r\n","mdAbsolutePath":"C:/Users/timot/OneDrive/Desktop/reactjs.org/content/home/examples/a-stateful-component.md"}}]},"examples":{"edges":[{"node":{"fileAbsolutePath":"C:/Users/timot/OneDrive/Desktop/reactjs.org/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"A Simple Component","domid":"hello-example"},"html":"<p>React components implement a <code class=\"gatsby-code-text\">render()</code> method that takes input data and returns what to display. This example uses an XML-like syntax called JSX. Input data that is passed into the component can be accessed by <code class=\"gatsby-code-text\">render()</code> via <code class=\"gatsby-code-text\">this.props</code>.</p>\n<p><strong>JSX is optional and not required to use React.</strong> Try the <a href=\"https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgFgAoUJFiCoAQwCWYOHRhZGIYAFdU6AHQBzOFACiSFVABCATwCSjABQByOiBBRLASl58ASnFHAoAEQDyAWVU6NEZpc0QUNCgqEQkpOid-IA\" target=\"_blank\" rel=\"noreferrer\">Babel REPL</a> to see the raw JavaScript code produced by the JSX compilation step.</p>"}},{"node":{"fileAbsolutePath":"C:/Users/timot/OneDrive/Desktop/reactjs.org/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"A Stateful Component","domid":"timer-example"},"html":"<p>In addition to taking input data (accessed via <code class=\"gatsby-code-text\">this.props</code>), a component can maintain internal state data (accessed via <code class=\"gatsby-code-text\">this.state</code>). When a component’s state data changes, the rendered markup will be updated by re-invoking <code class=\"gatsby-code-text\">render()</code>.</p>"}},{"node":{"fileAbsolutePath":"C:/Users/timot/OneDrive/Desktop/reactjs.org/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"An Application","domid":"todos-example"},"html":"<p>Using <code class=\"gatsby-code-text\">props</code> and <code class=\"gatsby-code-text\">state</code>, we can put together a small Todo application. This example uses <code class=\"gatsby-code-text\">state</code> to track the current list of items as well as the text that the user has entered. Although event handlers appear to be rendered inline, they will be collected and implemented using event delegation.</p>"}},{"node":{"fileAbsolutePath":"C:/Users/timot/OneDrive/Desktop/reactjs.org/content/home/examples/a-component-using-external-plugins.md","fields":{"slug":"/home/examples/a-component-using-external-plugins.html"},"frontmatter":{"title":"A Component Using External Plugins","domid":"markdown-example"},"html":"<p>React allows you to interface with other libraries and frameworks. This example uses <strong>remarkable</strong>, an external Markdown library, to convert the <code class=\"gatsby-code-text\">&lt;textarea></code>’s value in real time.</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"Declarative"},"html":"<p>React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.</p>\n<p>Declarative views make your code more predictable and easier to debug.</p>"}},{"node":{"frontmatter":{"title":"Component-Based"},"html":"<p>Build encapsulated components that manage their own state, then compose them to make complex UIs.</p>\n<p>Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</p>"}},{"node":{"frontmatter":{"title":"Learn Once, Write Anywhere"},"html":"<p>We don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.</p>\n<p>React can also render on the server using Node and power mobile apps using <a href=\"https://reactnative.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Native</a>.</p>"}}]}},"pageContext":{}},"staticQueryHashes":[]}